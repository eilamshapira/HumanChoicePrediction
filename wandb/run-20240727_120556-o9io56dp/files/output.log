
Start training the environment...
################
# Epoch 0
################
Retrieved vector for key 89: torch.Size([2, 64])
Retrieved vector for key 152: torch.Size([2, 64])
Retrieved vector for key 0: torch.Size([2, 64])
Retrieved vector for key 71: torch.Size([2, 64])
Retrieved vector for key 89: torch.Size([2, 64])
Retrieved vector for key 152: torch.Size([2, 64])
Retrieved vector for key 0: torch.Size([2, 64])
Retrieved vector for key 71: torch.Size([2, 64])
Stage: Training
Input vector shape: torch.Size([4, 10, 70])
Permuted input vector shape: torch.Size([4, 70, 10])
Expanded game vector shape: torch.Size([4, 128, 10])
Expanded user vector shape: torch.Size([4, 128, 10])
Combined vector shape (should be [batch_size, total_input_dim, seq_length]): torch.Size([4, 326, 10])
Conv output shape: torch.Size([4, 256, 10])
Reshaped conv output shape: torch.Size([40, 256])
Final output shape: torch.Size([4, 10, 2])
Retrieved vector for key 34: torch.Size([2, 64])
Retrieved vector for key 21: torch.Size([2, 64])
Retrieved vector for key 43: torch.Size([2, 64])
Retrieved vector for key 73: torch.Size([2, 64])
Retrieved vector for key 34: torch.Size([2, 64])
Retrieved vector for key 21: torch.Size([2, 64])
Retrieved vector for key 43: torch.Size([2, 64])
Retrieved vector for key 73: torch.Size([2, 64])
Stage: Training
Input vector shape: torch.Size([4, 10, 70])
Permuted input vector shape: torch.Size([4, 70, 10])
Expanded game vector shape: torch.Size([4, 128, 10])
Expanded user vector shape: torch.Size([4, 128, 10])
Combined vector shape (should be [batch_size, total_input_dim, seq_length]): torch.Size([4, 326, 10])
Conv output shape: torch.Size([4, 256, 10])
Reshaped conv output shape: torch.Size([40, 256])
Final output shape: torch.Size([4, 10, 2])
Retrieved vector for key 84: torch.Size([2, 64])
Retrieved vector for key 118: torch.Size([2, 64])
Retrieved vector for key 90: torch.Size([2, 64])
Retrieved vector for key 145: torch.Size([2, 64])
Retrieved vector for key 84: torch.Size([2, 64])
Retrieved vector for key 118: torch.Size([2, 64])
Retrieved vector for key 90: torch.Size([2, 64])
Retrieved vector for key 145: torch.Size([2, 64])
Stage: Training
Input vector shape: torch.Size([4, 10, 70])
Permuted input vector shape: torch.Size([4, 70, 10])
Expanded game vector shape: torch.Size([4, 128, 10])
Expanded user vector shape: torch.Size([4, 128, 10])
Combined vector shape (should be [batch_size, total_input_dim, seq_length]): torch.Size([4, 326, 10])
Conv output shape: torch.Size([4, 256, 10])
Reshaped conv output shape: torch.Size([40, 256])
Final output shape: torch.Size([4, 10, 2])
Retrieved vector for key 45: torch.Size([2, 64])
Retrieved vector for key 184: torch.Size([2, 64])
Retrieved vector for key 4: torch.Size([2, 64])
Retrieved vector for key 143: torch.Size([2, 64])
Retrieved vector for key 45: torch.Size([2, 64])
Retrieved vector for key 184: torch.Size([2, 64])
Retrieved vector for key 4: torch.Size([2, 64])
Retrieved vector for key 143: torch.Size([2, 64])
Stage: Training
Input vector shape: torch.Size([4, 10, 70])
Permuted input vector shape: torch.Size([4, 70, 10])
Expanded game vector shape: torch.Size([4, 128, 10])
Expanded user vector shape: torch.Size([4, 128, 10])
Combined vector shape (should be [batch_size, total_input_dim, seq_length]): torch.Size([4, 326, 10])
Conv output shape: torch.Size([4, 256, 10])
Reshaped conv output shape: torch.Size([40, 256])
Final output shape: torch.Size([4, 10, 2])
Retrieved vector for key 89: torch.Size([128, 10])
Retrieved vector for key 122: torch.Size([2, 64])
Retrieved vector for key 32: torch.Size([2, 64])
Retrieved vector for key 45: torch.Size([128, 10])
Train:   0%|          | 4/2260 [00:00<03:44, 10.06it/s]
Traceback (most recent call last):
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\StrategyTransfer.py", line 128, in <module>
    env_model = environments.CNN_env.CNN_env(env_name, config=config)
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\environments\environment.py", line 38, in __init__
    self.train()
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\environments\environment.py", line 170, in train
    model_vectors["user_vector"] = self.model.user_vectors[batch["user_id"].to("cpu").numpy()].to(
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\utils\usersvectors.py", line 25, in __getitem__
    return torch.stack(vectors)
RuntimeError: stack expects each tensor to be equal size, but got [128, 10] at entry 0 and [2, 64] at entry 1