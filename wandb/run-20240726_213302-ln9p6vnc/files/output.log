
Start training the environment...
################
# Epoch 0
################
Initial game vector shape: torch.Size([4, 2, 64])
Initial user vector shape: torch.Size([4, 2, 64])
Expanded game vector shape: torch.Size([4, 10, 128])
Expanded user vector shape: torch.Size([4, 10, 128])
Combined vector shape (should be [batch_size, 198, seq_length]): torch.Size([4, 198, 10])
Initial game vector shape: torch.Size([4, 2, 64])
Initial user vector shape: torch.Size([4, 2, 64])
Expanded game vector shape: torch.Size([4, 10, 128])
Expanded user vector shape: torch.Size([4, 10, 128])
Combined vector shape (should be [batch_size, 198, seq_length]): torch.Size([4, 198, 10])
Initial game vector shape: torch.Size([4, 2, 64])
Initial user vector shape: torch.Size([4, 2, 64])
Expanded game vector shape: torch.Size([4, 10, 128])
Expanded user vector shape: torch.Size([4, 10, 128])
Combined vector shape (should be [batch_size, 198, seq_length]): torch.Size([4, 198, 10])
Initial game vector shape: torch.Size([4, 2, 64])
Initial user vector shape: torch.Size([4, 2, 64])
Expanded game vector shape: torch.Size([4, 10, 128])
Expanded user vector shape: torch.Size([4, 10, 128])
Combined vector shape (should be [batch_size, 198, seq_length]): torch.Size([4, 198, 10])
Train:   0%|          | 4/2260 [00:00<05:52,  6.40it/s]
Traceback (most recent call last):
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\StrategyTransfer.py", line 128, in <module>
    env_model = environments.CNN_env.CNN_env(env_name, config=config)
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\environments\environment.py", line 38, in __init__
    self.train()
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\environments\environment.py", line 170, in train
    model_vectors["user_vector"] = self.model.user_vectors[batch["user_id"].to("cpu").numpy()].to(
  File "C:\Users\Bella Perel\PycharmProjects\nlp_project_eilam\HumanChoicePrediction\utils\usersvectors.py", line 21, in __getitem__
    return torch.stack([self.users[k] if k in self.users.keys() else self.get_init_vector() for k in key])
RuntimeError: stack expects each tensor to be equal size, but got [10, 128] at entry 0 and [2, 64] at entry 1